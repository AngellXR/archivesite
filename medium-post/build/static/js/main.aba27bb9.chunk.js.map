{"version":3,"sources":["utils/ShortenText.js","components/MediumCard.js","utils/Totext.js","components/Slider.js","components/App.js","helpers/serviceWorker.js","index.js"],"names":["ShortenText","text","startingPoint","maxLength","length","slice","MediumCard","props","shortMonthName","Intl","DateTimeFormat","month","format","date","Date","pubDate","publishDate","getDate","getFullYear","small","className","style","backgroundImage","thumbnail","href","profilelink","target","avatar","rel","author","link","title","node","tag","document","createElement","innerHTML","innerText","ToText","content","icon","faUser","faCalendarAlt","Slider","mediumURL","state","itemRows","profileLink","fetch","this","then","res","json","data","feed","image","posts","items","filter","item","categories","setState","forEach","i","row","Math","floor","push","console","log","map","key","j","lg","md","sm","React","Component","App","Fragment","xs","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aba27bb9.chunk.js","sourcesContent":["export default function ShortenText(text, startingPoint, maxLength) {\n  return text.length > maxLength ? text.slice(startingPoint, maxLength) : text;\n}\n","import React from \"react\";\nimport { Card, CardBody } from \"shards-react\";\nimport ShortenText from \"../utils/ShortenText\";\nimport ToText from \"../utils/Totext\";\nimport { faUser, faCalendarAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// functional card component to display single item\nexport default function MediumCard(props) {\n  var shortMonthName = new Intl.DateTimeFormat(\"en-US\", {\n    month: \"short\",\n  }).format;\n  let date = new Date(props.pubDate);\n  const publishDate =\n    shortMonthName(date) +\n    \" \" +\n    date.getDate() +\n    \",\" +\n    \" \" +\n    date.getFullYear();\n  return (\n    <Card small className=\"card-post card-post--1\">\n      <div\n        className=\"card-post__image\"\n        style={{ backgroundImage: `url(${props.thumbnail})` }}\n      >\n        <div className=\"card-post__author d-flex\">\n          <a\n            href={props.profilelink}\n            target=\"_blank\"\n            className=\"card-post__author-avatar card-post__author-avatar--small\"\n            style={{\n              backgroundImage: `url(${props.avatar})`,\n            }}\n            rel=\"noopener noreferrer\"\n          >\n            Written by {props.author}\n          </a>\n        </div>\n      </div>\n      <CardBody>\n        <h5 className=\"card-title\">\n          <a\n            href={props.link}\n            target=\"_blank\"\n            className=\"text-fiord-blue\"\n            rel=\"noopener noreferrer\"\n          >\n            {ShortenText(props.title, 0, 50)}\n          </a>\n        </h5>\n        <p className=\"card-text d-inline-block mb-3\">\n          {ShortenText(ToText(props.content), 0, 120) + \"...\"}\n        </p>\n        <br />\n        <span className=\"text-dark\">\n          <FontAwesomeIcon icon={faUser} /> {props.author}\n        </span>\n        <br />\n\n        <span className=\"text-muted\">\n          <FontAwesomeIcon icon={faCalendarAlt} /> {publishDate}\n        </span>\n      </CardBody>\n    </Card>\n  );\n}\n","export default function ToText(node) {\n  let tag = document.createElement(\"div\");\n  tag.innerHTML = node;\n  node = tag.innerText;\n  return node;\n}\n","import React from \"react\";\nimport { Col, Row } from \"shards-react\";\nimport MediumCard from \"./MediumCard\";\n\n// wrapper for items\nclass Slider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { itemRows: [], avatar: \"\", profileLink: \"\" };\n  }\n  mediumURL =\n    \"https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@altontech\";\n\n  componentDidMount() {\n    fetch(this.mediumURL)\n      .then((res) => res.json())\n      .then((data) => {\n        // create two-dimensional array with 3 elements per inner array\n        const avatar = data.feed.image;\n        const profileLink = data.feed.link;\n        const res = data.items; //This is an array with the content. No feed, no info about author etc..\n        const posts = res.filter((item) => item.categories.length > 0);\n\n        this.setState({ avatar: avatar, profileLink: profileLink });\n        const itemRows = [];\n        posts.forEach((item, i) => {\n          item[\"avatar\"] = this.state.avatar; // push avatar inside the json\n          item[\"profilelink\"] = this.state.profileLink; // push profile link inside the JSON\n          const row = Math.floor(i / 3);\n          if (!itemRows[row]) itemRows[row] = [];\n          itemRows[row].push(item);\n        });\n        this.setState({ itemRows: itemRows });\n        console.log(itemRows);\n      });\n  }\n  render() {\n    return (\n      <div className=\"blog__slider\">\n        {this.state.itemRows.map((row, i) => (\n          <Row key={i}>\n            {row.map((item, j) => (\n              <Col key={j} lg=\"4\" md=\"6\" sm=\"12\" className=\"mb-4\">\n                <MediumCard {...item} />\n              </Col>\n            ))}\n          </Row>\n        ))}\n      </div>\n    );\n  }\n}\nexport default Slider;\n","import React from \"react\";\nimport Slider from \"./Slider\";\nimport { Col } from \"shards-react\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Col\n        xs=\"22\"\n        sm=\"40\"\n        className=\"text-sm-left text-center text-md-left mb-sm-0\"\n      >\n        <span className=\"text-uppercase page-subtitle\">\n          Medium.com/@altontech\n        </span>\n        <h3 className=\"page-title\">Blog</h3>\n      </Col>\n      {\"{{\"} <a href=\"https://angellxr.com/\">return</a>\n      {\"  \"}\n      {\"}}\"}\n      <Slider />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./helpers/serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\nimport \"./assets/shards-dashboards.1.1.0.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}